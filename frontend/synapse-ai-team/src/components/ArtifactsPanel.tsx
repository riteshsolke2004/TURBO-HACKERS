import React, { useState } from "react";
import { motion } from "framer-motion";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { FileText, Download, Eye, Package } from "lucide-react";
import ReactMarkdown from "react-markdown";

interface Artifact {
  id: string;
  name: string;
  type: "report" | "data" | "analysis" | "document";
  agent: string;
  content: string;
  timestamp: string;
  size: string;
}

interface ArtifactsPanelProps {
  artifacts: Artifact[];
}

export const ArtifactsPanel: React.FC<ArtifactsPanelProps> = ({ artifacts }) => {
  const [selectedArtifact, setSelectedArtifact] = useState<Artifact | null>(null);

  const getArtifactIcon = (type: string) => {
    switch (type) {
      case "report":
        return <FileText className="h-4 w-4" />;
      case "data":
        return <Package className="h-4 w-4" />;
      case "analysis":
        return <Eye className="h-4 w-4" />;
      default:
        return <FileText className="h-4 w-4" />;
    }
  };

  const mockArtifacts: Artifact[] = [
    {
      id: "1",
      name: "Market Analysis Report",
      type: "report",
      agent: "Report",
      content: `# Market Analysis Report

## Executive Summary
This report provides a comprehensive analysis of the current market trends and opportunities.

## Key Findings
- Market growth rate: 15.3%
- Top competitors identified
- Emerging opportunities in sector X

## Recommendations
1. Focus on digital transformation
2. Expand into emerging markets
3. Invest in R&D initiatives`,
      timestamp: new Date().toISOString(),
      size: "2.3 KB"
    },
    {
      id: "2", 
      name: "Data Processing Results",
      type: "data",
      agent: "Data",
      content: "Processed dataset with 10,000 records. Data quality score: 94%",
      timestamp: new Date().toISOString(),
      size: "1.1 KB"
    }
  ];

  const displayArtifacts = artifacts.length > 0 ? artifacts : mockArtifacts;

  const handleDownload = (artifact: Artifact) => {
    const blob = new Blob([artifact.content], { type: "text/markdown" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `${artifact.name}.md`;
    a.click();
    URL.revokeObjectURL(url);
  };

  if (selectedArtifact) {
    return (
      <Card className="h-[500px] border-node-border">
        <div className="p-4 border-b border-node-border flex items-center justify-between">
          <div>
            <h3 className="text-lg font-semibold text-primary">{selectedArtifact.name}</h3>
            <p className="text-sm text-muted-foreground">Generated by {selectedArtifact.agent}</p>
          </div>
          <Button
            variant="ghost"
            onClick={() => setSelectedArtifact(null)}
            className="text-muted-foreground"
          >
            ‚Üê Back
          </Button>
        </div>
        
        <ScrollArea className="h-[calc(500px-80px)]">
          <div className="p-4">
            <div className="prose prose-sm dark:prose-invert max-w-none">
              <ReactMarkdown>{selectedArtifact.content}</ReactMarkdown>
            </div>
          </div>
        </ScrollArea>
      </Card>
    );
  }

  return (
    <Card className="h-[500px] border-node-border">
      <div className="p-4 border-b border-node-border">
        <h3 className="text-lg font-semibold text-primary">Artifacts</h3>
        <p className="text-sm text-muted-foreground">Generated reports and data</p>
      </div>
      
      <ScrollArea className="h-[calc(500px-80px)]">
        <div className="p-4 space-y-3">
          {displayArtifacts.length === 0 ? (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="text-center text-muted-foreground py-8"
            >
              <Package className="h-12 w-12 mx-auto mb-2 opacity-50" />
              <p>No artifacts generated yet. Agents will create reports and data files here.</p>
            </motion.div>
          ) : (
            displayArtifacts.map((artifact, index) => (
              <motion.div
                key={artifact.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.1 }}
                className="p-3 rounded-lg border border-node-border bg-card/50 hover:bg-card/80 transition-colors"
              >
                <div className="flex items-start justify-between mb-2">
                  <div className="flex items-center gap-2">
                    {getArtifactIcon(artifact.type)}
                    <h4 className="font-medium text-sm">{artifact.name}</h4>
                  </div>
                  <Badge variant="outline" className="text-xs">
                    {artifact.agent}
                  </Badge>
                </div>
                
                <p className="text-xs text-muted-foreground mb-3 line-clamp-2">
                  {artifact.content.slice(0, 100)}...
                </p>
                
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-4 text-xs text-muted-foreground">
                    <span>{artifact.size}</span>
                    <span>{new Date(artifact.timestamp).toLocaleDateString()}</span>
                  </div>
                  
                  <div className="flex gap-1">
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => setSelectedArtifact(artifact)}
                      className="h-6 px-2"
                    >
                      <Eye className="h-3 w-3" />
                    </Button>
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => handleDownload(artifact)}
                      className="h-6 px-2"
                    >
                      <Download className="h-3 w-3" />
                    </Button>
                  </div>
                </div>
              </motion.div>
            ))
          )}
        </div>
      </ScrollArea>
    </Card>
  );
};